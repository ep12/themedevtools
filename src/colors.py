import os as _os
import re as _re


def icr(i: float):
	return [0, 255, round(i)][(i >= 0) + (i < 256)]


def cr(c: tuple):
	return tuple([icr(x) for x in c])


def mix(*args):
	assert all([isinstance(x, tuple) for x in args])
	assert len(args) >= 2
	assert all([len(x) is 3 for x in args])
	if len(args) > 2:
		return mix(mix(*args[:2]), *args[2:])
	elif len(args) is 2:
		return cr([x + y for x, y in zip(args[0], args[1])])
	else:
		return args


def sc(c: tuple, f: float):
	return cr([x * f for x in c])


def mult(c1: tuple, c2: tuple):
	return cr([x * y for x, y in zip(c1, c2)])


def initColors(b1=(0xff, 0x00, 0x00), b2=(0x00, 0xff, 0x00), b3=(0x00, 0x00, 0xff)):
	colors = [(0, 0, 0)] * 256
	colors[0x0], colors[0x8] = (0x00, 0x00, 0x00), (0x80, 0x80, 0x80)
	colors[0x1], colors[0x9] = (0xc0, 0x00, 0x00), (0xff, 0x00, 0x00)
	colors[0x2], colors[0xa] = (0x00, 0xc0, 0x00), (0x00, 0xff, 0x00)
	colors[0x3], colors[0xb] = (0xc0, 0xa0, 0x00), (0xff, 0xff, 0x00)
	colors[0x4], colors[0xc] = (0x00, 0x00, 0xc0), (0x00, 0x00, 0xff)
	colors[0x5], colors[0xd] = (0xc0, 0x00, 0xc0), (0xff, 0x00, 0xff)
	colors[0x6], colors[0xe] = (0x00, 0xc0, 0xc0), (0x00, 0xff, 0xff)
	colors[0x7], colors[0xf] = (0xc0, 0xc0, 0xc0), (0xff, 0xff, 0xff)
	for n in range(216):
		x = sc(b1, 1 / 5 * (n // 36))
		y = sc(b2, 1 / 5 * ((n % 36) // 6))
		z = sc(b3, 1 / 5 * (n % 6))
		colors[16 + n] = mix(x, y, z)
	for n in range(24):
		colors[232 + n] = sc((255, 255, 255), n / 24)
	return colors


def colordemo(c: tuple):
	assert isinstance(c, (tuple, list, int))
	if isinstance(c, int):
		assert c < 256 and c >= 0
		return '\x1b[48;5;{1}m{0}\x1b[0m'.format('  ', c)
	else:
		return '\x1b[48;2;{1};{2};{3}m{0}\x1b[0m'.format('  ', *c)


def minichart(colors=None):
	ret = ''
	if colors is None:
		for n in range(16):
			ret += colordemo(n) + '\n' * (n % 8 is 7)
		for n in range(16, 232):
			ret += colordemo(n) + '\n' * ((n - 16) % 36 is 35)
		for n in range(232, 256):
			ret += colordemo(n)
		ret += '\n'
	else:
		for n in range(16):
			ret += colordemo(colors[n]) + '\n' * (n % 8 is 7)
		for n in range(16, 232):
			ret += colordemo(colors[n]) + '\n' * ((n - 16) % 36 is 35)
		for n in range(232, 256):
			ret += colordemo(colors[n])
		ret += '\n'
	return ret


def fromHex(color: str) -> tuple:
	assert isinstance(color, str)
	if color.startswith('#'):
		c = color[1:]
	else:
		c = color
	assert len(c) in [3, 6]
	return tuple([int((2 - (len(c) is 6)) * c[x:x + 2 - (len(c) is 3)], 16) for x in range(0, len(c), 2 - (len(c) is 3))])


def toHex(color: tuple) -> str:
	assert isinstance(color, tuple) and len(color) is 3
	return '#%2x%2x%2x' % color


class theme(object):
	_cfgregex = '(?P<name>(color[\d]{1:3}|background|foreground|cursor))[\s]*=[\s]*(?P<color>#([\da-fA-F]{3}|[\da-fA-F]{3}))'

	def __init__(self, name=None, file=None):
		self.c256 = initColors()
		self.bg = (0x00, 0x00, 0x00)
		self.fg = (0xff, 0xff, 0xff)
		self.csr = (0xff, 0xff, 0xff)
		self.name = ''
		if name is not None and isinstance(name, str):
			self.name = name
		if file is not None and _os.path.isfile(file):
			self.load(file)

	def load(self, file: str):
		assert isinstance(file, str) and _os.path.isfile(file)
		with open(file) as f:
			cont = f.readlines()
		for l in cont:
			if bool(re.match(_cfgregex, l)):
				m = re.match(_cfgregex, l).groupdict()
				d = m['name']
				c = fromHex(m['color'])
				if d is 'background':
					self.bg = c
				elif d is 'foreground':
					self.fg = c
				elif d is 'cursor':
					self.csr = c
				else:
					self.c256[int(c[5:])] = c
			elif bool(re.match('# Theme name: \'(?P<name>[^\']*)\'\n', l)):
				self.name = re.match('# Theme name: \'(?P<name>[^\']*)\'\n', l).groupdict()['name']

	def save(self, file: str):
		assert isinstance(file, str) and _os.path.isdir(_os.path.dirname(file))
		if _os.path.isdir(file):
			if self.name:
				fn = _os.path.dirname(file) + _os.sep + name + '.properties'
			else:
				fn = _os.path.dirname(file) + _os.sep + 'theme.properties'
		else:
			fn = file
		with open(fn, 'w') as f:
			f.write('# Generated by themedevtools:\n')
			f.write('# https://www.github.com/ep12/themedevtools\n\n')
			f.write('# Theme name: %r\n' % self.name)
			f.write('foreground=%s\n' % toHex(self.fg))
			f.write('background=%s\n' % toHex(self.bg))
			f.write('cursor=%s\n' % toHex(self.csr))
			for i in range(len(self.c256)):
				f.write('color%d=%s\n' % (i, toHex(self.c256[i])))

	def install(self):
		if _os.path.isdir('/data/data/com.termux/files/home/.termux'):
			print('Termux installation...\b\b\b', end='')
			if _os.path.exists('/data/data/com.termux/files/home/.termux/colors.properties'):
				import time as _time
				_os.rename('/data/data/com.termux/files/home/.termux/colors-%s.properties' % time.strftime('%Y%m%d_%H%M%S'))
			self.save('/data/data/com.termux/files/home/.termux/colors.properties')
			_os.system('termux-reload-settings')
			print(' completed.')

	@property
	def chart(self):
		ret = 'Foreground: %s\n' + colordemo(self.fg)
		ret += 'Background: %s\n' + colordemo(self.bg)
		ret += 'Cursor    : %s\n' + colordemo(self.csr)
		ret += minichart(self.c256)
		return ret
